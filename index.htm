<!doctype html>
<head><meta charset="utf-8">
<link rel="stylesheet" href="ecmarkup.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="ecmarkup.js"></script>
<title>Public Class Fields</title><script type="application/json" id="menu-search-biblio">[{"type":"clause","id":"intro","aoid":null,"title":"Introduction","number":"","namespace":"<no location>","location":"","key":"Introduction"},{"type":"clause","id":"new-productions","aoid":null,"title":"New Productions","number":"1","namespace":"<no location>","location":"","key":"New Productions"},{"type":"clause","id":"public-field-definition","aoid":null,"title":"|PublicFieldDefinition|","number":"1.1","namespace":"<no location>","location":"","key":"|PublicFieldDefinition|"},{"type":"clause","id":"static-semantics-class-public-fields","aoid":null,"title":"Static Semantics: ClassPublicFields","number":"1.2","namespace":"<no location>","location":"","key":"Static Semantics: ClassPublicFields"},{"type":"clause","id":"runtime-semantics-class-public-field-definition-evaluation","aoid":null,"title":"ClassPublicFieldDefinitionEvaluation","number":"1.3","namespace":"<no location>","location":"","key":"ClassPublicFieldDefinitionEvaluation"},{"type":"clause","id":"initialize-public-static-fields","aoid":null,"title":"InitializePublicStaticFields(_F_)","number":"1.4","namespace":"<no location>","location":"","key":"InitializePublicStaticFields(_F_)"},{"type":"clause","id":"initialize-public-instance-fields","aoid":null,"title":"InitializePublicInstanceFields ( _O_, _constructor_ )","number":"1.5","namespace":"<no location>","location":"","key":"InitializePublicInstanceFields ( _O_, _constructor_ )"},{"type":"clause","id":"modified-productions","aoid":null,"title":"Modified Productions","number":"2","namespace":"<no location>","location":"","key":"Modified Productions"},{"type":"clause","id":"class-definitions","aoid":null,"title":"Class Definitions","number":"2.1","namespace":"<no location>","location":"","key":"Class Definitions"},{"type":"clause","id":"static-semantics-is-static","aoid":null,"title":"Static Semantics: IsStatic","number":"2.1.1","namespace":"<no location>","location":"","key":"Static Semantics: IsStatic"},{"type":"clause","id":"class-element","aoid":null,"title":"|ClassElement|","number":"2.1.2","namespace":"<no location>","location":"","key":"|ClassElement|"},{"type":"clause","id":"runtime-semantics-class-definition-evaluation","aoid":null,"title":"Runtime Semantics: ClassDefinitionEvaluation","number":"2.1.3","namespace":"<no location>","location":"","key":"Runtime Semantics: ClassDefinitionEvaluation"},{"type":"clause","id":"[[construct]]","aoid":null,"title":"[[Construct]] ( _argumentsList_, _newTarget_)","number":"2.2","namespace":"<no location>","location":"","key":"[[Construct]] ( _argumentsList_, _newTarget_)"},{"type":"clause","id":"the-super-keyword","aoid":null,"title":"The `super` Keyword","number":"2.3","namespace":"<no location>","location":"","key":"The `super` Keyword"},{"type":"clause","id":"sec-super-keyword-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","number":"2.3.1","namespace":"<no location>","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-copyright-and-software-license","aoid":null,"title":"Copyright & Software License","number":"A","namespace":"<no location>","location":"","key":"Copyright & Software License"},{"type":"production","id":"prod-PublicFieldDefinition","name":"PublicFieldDefinition","namespace":"<no location>","location":"","key":"PublicFieldDefinition"},{"type":"production","id":"prod-ClassElementList","name":"ClassElementList","namespace":"<no location>","location":"","key":"ClassElementList"},{"type":"production","id":"prod-ClassElement","name":"ClassElement","namespace":"<no location>","location":"","key":"ClassElement"},{"type":"production","id":"prod-ClassTail","name":"ClassTail","namespace":"<no location>","location":"","key":"ClassTail"},{"type":"production","id":"prod-SuperCall","name":"SuperCall","namespace":"<no location>","location":"","key":"SuperCall"}]</script></head><body><div id="menu-toggle">☰</div><div id="menu"><div id="menu-search"><input type="text" id="menu-search-box" placeholder="Search..."><div id="menu-search-results" class="inactive"></div></div><div id="menu-toc"><ol class="toc"><li><span class="item-toggle-none"></span><a href="#intro" title="Introduction"><span class="secnum"></span> Introduction</a></li><li><span class="item-toggle">◢</span><a href="#new-productions" title="New Productions"><span class="secnum">1</span> New Productions</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#public-field-definition" title="|PublicFieldDefinition|"><span class="secnum">1.1</span> <emu-nt>PublicFieldDefinition</emu-nt></a></li><li><span class="item-toggle-none"></span><a href="#static-semantics-class-public-fields" title="Static Semantics: ClassPublicFields"><span class="secnum">1.2</span> SS: ClassPublicFields</a></li><li><span class="item-toggle-none"></span><a href="#runtime-semantics-class-public-field-definition-evaluation" title="ClassPublicFieldDefinitionEvaluation"><span class="secnum">1.3</span> ClassPublicFieldDefinitionEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#initialize-public-static-fields" title="InitializePublicStaticFields(_F_)"><span class="secnum">1.4</span> InitializePublicStaticFields(<var>F</var>)</a></li><li><span class="item-toggle-none"></span><a href="#initialize-public-instance-fields" title="InitializePublicInstanceFields ( _O_, _constructor_ )"><span class="secnum">1.5</span> InitializePublicInstanceFields ( <var>O</var>, <var>constructor</var> )</a></li></ol></li><li><span class="item-toggle">◢</span><a href="#modified-productions" title="Modified Productions"><span class="secnum">2</span> Modified Productions</a><ol class="toc"><li><span class="item-toggle">◢</span><a href="#class-definitions" title="Class Definitions"><span class="secnum">2.1</span> Class Definitions</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#static-semantics-is-static" title="Static Semantics: IsStatic"><span class="secnum">2.1.1</span> SS: IsStatic</a></li><li><span class="item-toggle-none"></span><a href="#class-element" title="|ClassElement|"><span class="secnum">2.1.2</span> <emu-nt>ClassElement</emu-nt></a></li><li><span class="item-toggle-none"></span><a href="#runtime-semantics-class-definition-evaluation" title="Runtime Semantics: ClassDefinitionEvaluation"><span class="secnum">2.1.3</span> RS: ClassDefinitionEvaluation</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#[[construct]]" title="[[Construct]] ( _argumentsList_, _newTarget_)"><span class="secnum">2.2</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var>)</a></li><li><span class="item-toggle">◢</span><a href="#the-super-keyword" title="The `super` Keyword"><span class="secnum">2.3</span> The <code>super</code> Keyword</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-super-keyword-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">2.3.1</span> RS: Evaluation</a></li></ol></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-copyright-and-software-license" title="Copyright &amp; Software License"><span class="secnum">A</span> Copyright &amp; Software License</a></li></ol></div></div><h1 class="version">Stage 1 Draft / July 26, 2016</h1><h1 class="title">Public Class Fields</h1>

<emu-intro id="intro">
  <emu-import href="./introduction.htm"><h1><span class="secnum"></span>Introduction<span class="utils"><span class="anchor"><a href="#intro">#</a></span></span></h1>

<p>Today ES classes are currently limited to declarative specification of 
methods, but declarative specification of fields is left to ad-hoc expando 
mutations on class instances in various places.</p>

<p>This proposal aims to provide a declarative mechanism for specifying fields
intended to be placed on classes. Such a mechanism is useful for both developers
and tooling alike as it provides a place to specify the intended properties.</p>
</emu-import>
</emu-intro>

<emu-clause id="new-productions">
  <emu-import href="./new-productions.htm"><h1><span class="secnum">1</span>New Productions<span class="utils"><span class="anchor"><a href="#new-productions">#</a></span></span></h1>

<emu-clause id="public-field-definition">
  <h1><span class="secnum">1.1</span><emu-nt><a href="#prod-PublicFieldDefinition">PublicFieldDefinition</a></emu-nt><span class="utils"><span class="anchor"><a href="#public-field-definition">#</a></span></span></h1>

  <emu-grammar><emu-production name="PublicFieldDefinition" id="prod-PublicFieldDefinition">
    <emu-nt><a href="#prod-PublicFieldDefinition">PublicFieldDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4cd3e710"><emu-nt params="?Yield"><a href="https://tc39.github.io/ecma262/#prod-PropertyName">PropertyName</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt optional=""><a href="https://tc39.github.io/ecma262/#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
</emu-clause>

<emu-clause id="static-semantics-class-public-fields">
  <h1><span class="secnum">1.2</span>Static Semantics: ClassPublicFields<span class="utils"><span class="anchor"><a href="#static-semantics-class-public-fields">#</a></span></span></h1>

  <emu-grammar><emu-production name="ClassElementList" collapsed="" id="prod-ClassElementList">
    <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="711bcbba"><emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
  <emu-alg><ol><li>If <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is the production 
       <emu-grammar><emu-production name="ClassElement" collapsed="" id="prod-ClassElement" class=" inline">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7b7260ec"><emu-nt><a href="#prod-PublicFieldDefinition">PublicFieldDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>, return
       a <emu-xref href="#sec-list-and-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-list-and-record-specification-type">List</a></emu-xref> containing <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt>.</li><li>If <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is the production 
       <emu-grammar><emu-production name="ClassElement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="512f5298"><emu-nt>static</emu-nt><emu-nt><a href="#prod-PublicFieldDefinition">PublicFieldDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>, 
       return a <emu-xref href="#sec-list-and-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-list-and-record-specification-type">List</a></emu-xref> containing <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt>.</li><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-list-and-record-specification-type">List</a></emu-xref>.
  </li></ol></emu-alg>

  <emu-grammar><emu-production name="ClassElementList" collapsed="">
    <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="9ac50b6a"><emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
  <emu-alg><ol><li>Let <var>list</var> be ClassPublicFields of <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt>.</li><li>If <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is the production
       <emu-grammar><emu-production name="ClassElement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7b7260ec"><emu-nt><a href="#prod-PublicFieldDefinition">PublicFieldDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>, append
       <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> to the end of <var>list</var>.</li><li>If <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is the production
       <emu-grammar><emu-production name="ClassElement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="512f5298"><emu-nt>static</emu-nt><emu-nt><a href="#prod-PublicFieldDefinition">PublicFieldDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>, 
       append <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> to the end of <var>list</var>.</li><li>Return <var>list</var>.
  </li></ol></emu-alg>
</emu-clause>

<emu-clause id="runtime-semantics-class-public-field-definition-evaluation">
  <h1><span class="secnum">1.3</span>ClassPublicFieldDefinitionEvaluation<span class="utils"><span class="anchor"><a href="#runtime-semantics-class-public-field-definition-evaluation">#</a></span></span></h1>

  <p>With parameter <var>isStatic</var>.</p>

  <emu-grammar><emu-production name="PublicFieldDefinition" collapsed="">
    <emu-nt><a href="#prod-PublicFieldDefinition">PublicFieldDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4cd3e710"><emu-nt params="?Yield"><a href="https://tc39.github.io/ecma262/#prod-PropertyName">PropertyName</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt optional=""><a href="https://tc39.github.io/ecma262/#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
  <emu-alg><ol><li>Let <var>fieldName</var> be the result of performing PropName of <emu-nt><a href="https://tc39.github.io/ecma262/#prod-PropertyName">PropertyName</a></emu-nt>.</li><li>If <emu-nt optional=""><a href="https://tc39.github.io/ecma262/#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, let <var>initializer</var> be <emu-nt optional=""><a href="https://tc39.github.io/ecma262/#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></li><li>Else, let <var>initializer</var> be <emu-const>empty</emu-const>.</li><li>Return <emu-xref href="#sec-list-and-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-list-and-record-specification-type">Record</a></emu-xref>{
         [[name]]: <var>fieldName</var>, 
         [[initializer]]: <var>initializer</var>,
         [[static]]: <var>isStatic</var>,
       }.
  </li></ol></emu-alg>
</emu-clause>

<emu-clause id="initialize-public-static-fields">
  <h1><span class="secnum">1.4</span>InitializePublicStaticFields(<var>F</var>)<span class="utils"><span class="anchor"><a href="#initialize-public-static-fields">#</a></span></span></h1>

  <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>F</var>) is Object.</li><li>Assert: <var>F</var> is an ECMAScript function object.</li><li>Let <var>publicFieldRecords</var> be the value of <var>F</var>'s [[PublicFields]] internal slot.</li><li>For each item <var>fieldRecord</var> in order from <var>publicFieldRecords</var>,<ol><li>If <var>fieldRecord</var>.[[static]] is <emu-val>true</emu-val>, then<ol><li>Let <var>fieldName</var> be <var>fieldRecord</var>.[[name]].</li><li>Let <var>initializer</var> be <var>fieldRecord</var>.[[initializer]].</li><li>If <var>initializer</var> is not <emu-const>empty</emu-const>, then<ol><li>Let <var>result</var> be the result of evaluating <var>initializer</var>.</li><li>Let <var>initValue</var> be the result of <emu-xref aoid="GetValue"><a href="https://tc39.github.io/ecma262/#sec-getvalue">GetValue</a></emu-xref>(<var>result</var>).</li><li>If <var>initValue</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, return 
             <emu-xref aoid="Completion"><a href="https://tc39.github.io/ecma262/#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>initValue</var>).</li></ol></li><li>Else, let <var>initValue</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>desc</var> be PropertyDescriptor {
             [[configurable]]: <emu-val>false</emu-val>,
             [[enumerable]]: <emu-val>true</emu-val>,
             [[writable]]: <emu-val>true</emu-val>,
             [[value]]: <var>initValue</var>
           }.</li><li>Perform ?<emu-xref aoid="DefinePropertyOrThrow"><a href="https://tc39.github.io/ecma262/#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref> (<var>F</var>, <var>fieldName</var>, <var>desc</var>).</li></ol></li></ol></li><li>Return.
  </li></ol></emu-alg>
</emu-clause>

<emu-clause id="initialize-public-instance-fields">
  <h1><span class="secnum">1.5</span>InitializePublicInstanceFields ( <var>O</var>, <var>constructor</var> )<span class="utils"><span class="anchor"><a href="#initialize-public-instance-fields">#</a></span></span></h1>

  <p>
    TODO: Factor out the lexical environment wrangling and do that at the 
          callsites of this procedure.
  
  </p>
  <emu-note><span class="note">Note</span>
    We likely want to execute public and private fields their coalesced order of 
    definition, so when the two proposals merge we'll probably want to merge
    their initialization procedures as well.
  
  </emu-note>

  <emu-alg><ol><li>Assert: Type ( <var>O</var> ) is Object.</li><li>Assert: Assert <var>constructor</var> is an ECMAScript function object.</li><li>Let <var>lex</var> be the <emu-xref href="#sec-lexical-environments"><a href="https://tc39.github.io/ecma262/#sec-lexical-environments">Lexical Environment</a></emu-xref> of the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>initializerEnv</var> be <emu-xref aoid="NewFunctionEnvironment"><a href="https://tc39.github.io/ecma262/#sec-newfunctionenvironment">NewFunctionEnvironment</a></emu-xref> ( <var>constructor</var>, <emu-val>undefined</emu-val> ).</li><li>Let <var>initializerEnvRec</var> be the value of <var>initializerEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="https://tc39.github.io/ecma262/#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Perform <var>initializerER</var>.BindThisValue ( <var>O</var> ).</li><li>Set the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>initializerEnv</var>.</li><li>Let <var>publicFieldRecords</var> be the value of <var>constructor</var>'s [[PublicFields]] internal slot.</li><li>For each item <var>fieldRecord</var> in order from <var>publicFieldRecords</var>,<ol><li>If <var>fieldRecord</var>.[[static]] is <emu-val>false</emu-val>, then<ol><li>Let <var>fieldName</var> be <var>fieldRecord</var>.[[name]]</li><li>Let <var>initializer</var> be <var>fieldRecord</var>.[[initializer]].</li><li>If <var>initializer</var> is not <emu-const>empty</emu-const>, then<ol><li>Let <var>result</var> be the result of evaluating <var>initializer</var>.</li><li>Let <var>initValue</var> be <emu-xref aoid="GetValue"><a href="https://tc39.github.io/ecma262/#sec-getvalue">GetValue</a></emu-xref>(<var>result</var>).</li><li>If <var>initValue</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Return <emu-xref aoid="Completion"><a href="https://tc39.github.io/ecma262/#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>initValue</var>).</li></ol></li><li>Let <var>desc</var> be PropertyDescriptor {
               [[configurable]]: <emu-val>false</emu-val>,
               [[enumerable]]: <emu-val>true</emu-val>,
               [[writable]]: <emu-val>true</emu-val>,
               [[value]]: <var>initValue</var>
             }</li><li>Perform ?<emu-xref aoid="DefinePropertyOrThrow"><a href="https://tc39.github.io/ecma262/#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref> (<var>O</var>, <var>fieldName</var>, <var>desc</var>)</li></ol></li></ol></li></ol></li><li>Set the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Return.
  </li></ol></emu-alg>
</emu-clause>
</emu-import>
</emu-clause>

<emu-clause id="modified-productions">
  <emu-import href="./modified-productions.htm"><h1><span class="secnum">2</span>Modified Productions<span class="utils"><span class="anchor"><a href="#modified-productions">#</a></span></span></h1>

<emu-clause id="class-definitions">
  <h1><span class="secnum">2.1</span>Class Definitions<span class="utils"><span class="anchor"><a href="#class-definitions">#</a></span></span></h1>

  <emu-clause id="static-semantics-is-static">
    <h1><span class="secnum">2.1.1</span>Static Semantics: IsStatic<span class="utils"><span class="anchor"><a href="#static-semantics-is-static">#</a></span></span></h1>

    <ins class="block">
      <emu-grammar><emu-production name="ClassElement" collapsed="">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7b7260ec"><emu-nt><a href="#prod-PublicFieldDefinition">PublicFieldDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>

      <emu-grammar><emu-production name="ClassElement" collapsed="">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="512f5298"><emu-nt>static</emu-nt><emu-nt><a href="#prod-PublicFieldDefinition">PublicFieldDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </ins>
  </emu-clause>

  <emu-clause id="class-element">
    <h1><span class="secnum">2.1.2</span><emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><span class="utils"><span class="anchor"><a href="#class-element">#</a></span></span></h1>

    <emu-production name="ClassElement">
      <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs><emu-nt params="?Yield"><a href="https://tc39.github.io/ecma262/#prod-MethodDefinition">MethodDefinition</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
      <emu-rhs><emu-t>static</emu-t><emu-nt params="?Yield"><a href="https://tc39.github.io/ecma262/#prod-MethodDefinition">MethodDefinition</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
      <ins class="block">
        <emu-rhs><emu-nt params="?Yield"><a href="#prod-PublicFieldDefinition">PublicFieldDefinition</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
        <emu-rhs><emu-t>static</emu-t><emu-nt params="?Yield"><a href="#prod-PublicFieldDefinition">PublicFieldDefinition</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
      </ins>
      <emu-rhs><emu-t>;</emu-t></emu-rhs>
    </emu-production>
  </emu-clause>

  <emu-clause id="runtime-semantics-class-definition-evaluation">
    <h1><span class="secnum">2.1.3</span>Runtime Semantics: ClassDefinitionEvaluation<span class="utils"><span class="anchor"><a href="#runtime-semantics-class-definition-evaluation">#</a></span></span></h1>

    <p>With parameter <var>className</var>.</p>
    <emu-grammar><emu-production name="ClassTail" collapsed="" id="prod-ClassTail">
    <emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b8ea6aa5"><emu-nt optional=""><a href="https://tc39.github.io/ecma262/#prod-ClassHeritage">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt optional=""><a href="https://tc39.github.io/ecma262/#prod-ClassBody">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
    <emu-alg><ol><li>Let <var>lex</var> be the LexicalEnvironment of the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="https://tc39.github.io/ecma262/#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>lex</var>).</li><li>Let <var>classScopeEnvRec</var> be <var>classScope</var>'s <emu-xref href="#sec-lexical-environments"><a href="https://tc39.github.io/ecma262/#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>If <var>className</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.CreateImmutableBinding(<var>className</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=""><a href="https://tc39.github.io/ecma262/#prod-ClassHeritage">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be the intrinsic object <emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="https://tc39.github.io/ecma262/#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be the intrinsic object <emu-xref href="#sec-properties-of-the-function-constructor"><a href="https://tc39.github.io/ecma262/#sec-properties-of-the-function-constructor">%FunctionPrototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclass</var> be the result of evaluating <emu-nt><a href="https://tc39.github.io/ecma262/#prod-ClassHeritage">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="https://tc39.github.io/ecma262/#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>superclass</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be the intrinsic object <emu-xref href="#sec-properties-of-the-function-constructor"><a href="https://tc39.github.io/ecma262/#sec-properties-of-the-function-constructor">%FunctionPrototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid="IsConstructor"><a href="https://tc39.github.io/ecma262/#sec-isconstructor">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ? <emu-xref aoid="Get"><a href="https://tc39.github.io/ecma262/#sec-get-o-p">Get</a></emu-xref>(<var>superclass</var>, <code>"prototype"</code>).</li><li>If <emu-xref aoid="Type"><a href="https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be <emu-xref aoid="ObjectCreate"><a href="https://tc39.github.io/ecma262/#sec-objectcreate">ObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=""><a href="https://tc39.github.io/ecma262/#prod-ClassBody">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href="https://tc39.github.io/ecma262/#prod-ClassBody">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=""><a href="https://tc39.github.io/ecma262/#prod-ClassHeritage">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present and <var>protoParent</var> is not <emu-val>null</emu-val>, then<ol><li>Let <var>constructor</var> be the result of parsing the source text
            <pre><code class="javascript hljs"><span class="hljs-keyword">constructor</span>(... args){ <span class="hljs-keyword">super</span> (...args);}</code></pre>
            using the syntactic grammar with the goal symbol <emu-nt params="~Yield"><a href="https://tc39.github.io/ecma262/#prod-MethodDefinition">MethodDefinition</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>constructor</var> be the result of parsing the source text
            <pre><code class="javascript hljs"><span class="hljs-keyword">constructor</span>( ){ }</code></pre>
            using the syntactic grammar with the goal symbol <emu-nt params="~Yield"><a href="https://tc39.github.io/ecma262/#prod-MethodDefinition">MethodDefinition</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt>.</li></ol></li></ol></li><li>Set the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be the result of performing DefineMethod for <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var> as the optional <var>functionPrototype</var> argument.</li><li>Assert: <var>constructorInfo</var> is not an <emu-xref href="#sec-completion-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-completion-record-specification-type">abrupt completion</a></emu-xref>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>If <emu-nt optional=""><a href="https://tc39.github.io/ecma262/#prod-ClassHeritage">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present and <var>protoParent</var> is not <emu-val>null</emu-val>, then set <var>F</var>.[[ConstructorKind]] to <code>"derived"</code>.</li><li>Perform <emu-xref aoid="MakeConstructor"><a href="https://tc39.github.io/ecma262/#sec-makeconstructor">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>Perform <emu-xref aoid="MakeClassConstructor"><a href="https://tc39.github.io/ecma262/#sec-makeclassconstructor">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid="CreateMethodProperty"><a href="https://tc39.github.io/ecma262/#sec-createmethodproperty">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <code>"constructor"</code>, <var>F</var>).</li><li>If <emu-nt optional=""><a href="https://tc39.github.io/ecma262/#prod-ClassBody">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href="https://tc39.github.io/ecma262/#prod-ClassBody">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> <var>m</var> in order from <var>methods</var><ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be the result of performing PropertyDefinitionEvaluation for <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be the result of performing PropertyDefinitionEvaluation for <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Return <emu-xref aoid="Completion"><a href="https://tc39.github.io/ecma262/#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>If <var>className</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.InitializeBinding(<var>className</var>, <var>F</var>).</li></ol></li><li><ins>If <emu-nt optional=""><a href="https://tc39.github.io/ecma262/#prod-ClassBody">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>publicFields</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-list-and-record-specification-type">List</a></emu-xref>.</ins></li><li><ins>Else, let <var>publicFields</var> be the result of performing
         ClassPublicFields of <emu-nt><a href="https://tc39.github.io/ecma262/#prod-ClassBody">ClassBody</a></emu-nt>.</ins></li><li><ins>Let <var>publicFieldRecords</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-list-and-record-specification-type">List</a></emu-xref>.</ins></li><li><ins>For each item <var>publicField</var> in order from <var>publicFields</var>,</ins><ol><li><ins>Let <var>isStatic</var> be the result of performing IsStatic of <var>publicField</var>.</ins></li><li><ins>Let <var>fieldRecord</var> be the result of performing 
           ClassPublicFieldDefinitionEvaluation for <var>publicField</var> with argument 
           <var>isStatic</var>.</ins></li><li><ins>Append <var>fieldRecord</var> to <var>publicFieldRecords</var>.</ins></li></ol></li><li><ins>Set the value of <var>F</var>'s [[PublicFields]] internal slot to <var>publicFieldRecords</var>.</ins></li><li><ins>Set the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</ins></li><li><ins>Let <var>result</var> be InitializePublicStaticFields(<var>F</var>).</ins></li><li><ins>If <var>result</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, then</ins><ol><li><ins>Set the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</ins></li><li><ins>Return <emu-xref aoid="Completion"><a href="https://tc39.github.io/ecma262/#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>result</var>)</ins></li></ol></li><li><ins>Set the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</ins></li><li>Return <var>F</var>.
    </li></ol></emu-alg>
  </emu-clause>
</emu-clause>

<emu-clause id="[[construct]]">
  <h1><span class="secnum">2.2</span>[[Construct]] ( <var>argumentsList</var>, <var>newTarget</var>)<span class="utils"><span class="anchor"><a href="#[[construct]]">#</a></span></span></h1>
  <p>
    The [[Construct]] internal method for an ECMAScript Function object <var>F</var> is
    called with parameters <var>argumentsList</var> and <var>newTarget</var>. <var>argumentsList</var> is
    a possibly empty <emu-xref href="#sec-list-and-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-list-and-record-specification-type">List</a></emu-xref> of ECMAScript language values. The following steps are
    taken:
  
  </p>
  <emu-alg><ol><li>Assert: <var>F</var> is an ECMAScript function object.</li><li>Assert: <emu-xref aoid="Type"><a href="https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <code>"base"</code>, then<ol><li>Let <var>thisArgument</var> be ? <emu-xref aoid="OrdinaryCreateFromConstructor"><a href="https://tc39.github.io/ecma262/#sec-ordinarycreatefromconstructor">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>"%ObjectPrototype%"</code>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid="PrepareForOrdinaryCall"><a href="https://tc39.github.io/ecma262/#sec-prepareforordinarycall">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li>Assert: <var>calleeContext</var> is now the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <code>"base"</code>, then<ol><li>Perform <emu-xref aoid="OrdinaryCallBindThis"><a href="https://tc39.github.io/ecma262/#sec-ordinarycallbindthis">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li><ins>Let <var>result</var> be InitializePublicInstanceFields(<var>thisArgument</var>, <var>F</var>).</ins></li><li><ins>If <var>result</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="https://tc39.github.io/ecma262/#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, then</ins><ol><li><ins>Remove <var>calleeContext</var> from <emu-xref href="#execution-context-stack"><a href="https://tc39.github.io/ecma262/#execution-context-stack">execution context stack</a></emu-xref> and restore
           <var>callerContext</var> as the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>.</ins></li><li><ins>Return <emu-xref aoid="Completion"><a href="https://tc39.github.io/ecma262/#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>result</var>).</ins></li></ol></li></ol></li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>constructorEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="https://tc39.github.io/ecma262/#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid="OrdinaryCallEvaluateBody"><a href="https://tc39.github.io/ecma262/#sec-ordinarycallevaluatebody">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href="#execution-context-stack"><a href="https://tc39.github.io/ecma262/#execution-context-stack">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href="#running-execution-context"><a href="https://tc39.github.io/ecma262/#running-execution-context">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid="Type"><a href="https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid="NormalCompletion"><a href="https://tc39.github.io/ecma262/#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <code>"base"</code>, return <emu-xref aoid="NormalCompletion"><a href="https://tc39.github.io/ecma262/#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid="ReturnIfAbrupt"><a href="https://tc39.github.io/ecma262/#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>envRec</var>.GetThisBinding().
  </li></ol></emu-alg>
</emu-clause>

<emu-clause id="the-super-keyword">
  <h1><span class="secnum">2.3</span>The <code>super</code> Keyword<span class="utils"><span class="anchor"><a href="#the-super-keyword">#</a></span></span></h1>

  <emu-clause id="sec-super-keyword-runtime-semantics-evaluation">
    <h1><span class="secnum">2.3.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-super-keyword-runtime-semantics-evaluation">#</a></span></span></h1>
    <emu-grammar><emu-production name="SuperCall" collapsed="" id="prod-SuperCall">
    <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a833032f"><emu-t>super</emu-t><emu-nt><a href="https://tc39.github.io/ecma262/#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
    <emu-alg><ol><li>Let <var>newTarget</var> be <emu-xref aoid="GetNewTarget"><a href="https://tc39.github.io/ecma262/#sec-getnewtarget">GetNewTarget</a></emu-xref>().</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>func</var> be ? <emu-xref aoid="GetSuperConstructor"><a href="https://tc39.github.io/ecma262/#sec-getsuperconstructor">GetSuperConstructor</a></emu-xref>().</li><li>Let <var>argList</var> be ArgumentListEvaluation of <emu-nt><a href="https://tc39.github.io/ecma262/#prod-Arguments">Arguments</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="https://tc39.github.io/ecma262/#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>argList</var>).</li><li>Let <var>result</var> be ? <emu-xref aoid="Construct"><a href="https://tc39.github.io/ecma262/#sec-construct">Construct</a></emu-xref>(<var>func</var>, <var>argList</var>, <var>newTarget</var>).</li><li>Let <var>thisER</var> be <emu-xref aoid="GetThisEnvironment"><a href="https://tc39.github.io/ecma262/#sec-getthisenvironment">GetThisEnvironment</a></emu-xref>( ).</li><li><ins>Perform ? InitializePublicInstanceFields(<var>thisValue</var>, <var>F</var>).</ins></li><li>Return ? <var>thisER</var>.BindThisValue(<var>result</var>).
    </li></ol></emu-alg>
  </emu-clause>
</emu-clause>
</emu-import>
</emu-clause><emu-annex id="sec-copyright-and-software-license">
      <h1><span class="secnum">A</span>Copyright &amp; Software License<span class="utils"><span class="anchor"><a href="#sec-copyright-and-software-license">#</a></span></span></h1>
      
      <h2>Copyright Notice</h2>
      <p>© 2016 Jeff Morrison</p>

      <h2>Software License</h2>
      <p>All Software contained in this document ("Software") is protected by copyright and is being made available under the "BSD License", included below. This Software may be subject to third party rights (rights from parties other than Ecma International), including patent rights, and no licenses under such third party rights are granted under this license even if the third party concerned is a member of Ecma International. SEE THE ECMA CODE OF CONDUCT IN PATENT MATTERS AVAILABLE AT http://www.ecma-international.org/memento/codeofconduct.htm FOR INFORMATION REGARDING THE LICENSING OF PATENT CLAIMS THAT ARE REQUIRED TO IMPLEMENT ECMA INTERNATIONAL STANDARDS.</p>

<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p>

<ol>
  <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li>
  <li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li>
  <li>Neither the name of the authors nor Ecma International may be used to endorse or promote products derived from this software without specific prior written permission.</li>
</ol>

<p>THIS SOFTWARE IS PROVIDED BY THE ECMA INTERNATIONAL "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ECMA INTERNATIONAL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>

    </emu-annex>
</body>